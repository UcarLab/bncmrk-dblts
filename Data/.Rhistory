colnames(x = sr_hto)]
counts <- as.matrix(x = counts)
ncenters <- init %||% (nrow(x = data) + 1)
library(Seurat)
set.seed(seed = seed)
assay <- assay %||% DefaultAssay(object = sr_hto)
data <- GetAssayData(object = sr_hto, assay = assay)
counts <- GetAssayData(object = sr_hto, assay = assay, slot = "counts")[,
colnames(x = sr_hto)]
counts <- as.matrix(x = counts)
ncenters <- init %||% (nrow(x = data) + 1)
trace("HTODemux",edit=TRUE)
trace("HTODemux",edit=TRUE)
DefaultAssay(object=sr_hto)
set.seed(seed = seed)
assay <-  DefaultAssay(object = sr_hto)
data <- GetAssayData(object = sr_hto, assay = assay)
counts <- GetAssayData(object = sr_hto, assay = assay, slot = "counts")[,
colnames(x = sr_hto)]
counts <- as.matrix(x = counts)
ncenters <-  (nrow(x = data) + 1)
trace("HTODemux",edit=TRUE)
seed=42
trace("HTODemux",edit=TRUE)
trace("HTODemux",edit=TRUE)
clara = {
init.clusters <- clara(x = t(x = GetAssayData(object = sr_hto,
assay = assay)), k = ncenters, samples = nsamples)
Idents(object = sr_hto, cells = names(x = init.clusters$clustering),
drop = TRUE) <- init.clusters$clustering
trace("HTODemux",edit=TRUE)
clara = {
init.clusters <- clara(x = t(x = GetAssayData(object = sr_hto,
assay = assay)), k = ncenters, samples = nsamples)
Idents(object = sr_hto, cells = names(x = init.clusters$clustering),
drop = TRUE) <- init.clusters$clustering}
trace("HTODemux",edit=TRUE)
??clara
library(cluster)
clara = {
init.clusters <- clara(x = t(x = GetAssayData(object = sr_hto,
assay = assay)), k = ncenters, samples = nsamples)
Idents(object = sr_hto, cells = names(x = init.clusters$clustering),
drop = TRUE) <- init.clusters$clustering}
trace("HTODemux",edit=TRUE)
nsamples=100
clara = {
init.clusters <- clara(x = t(x = GetAssayData(object = sr_hto,
assay = assay)), k = ncenters, samples = nsamples)
Idents(object = sr_hto, cells = names(x = init.clusters$clustering),
drop = TRUE) <- init.clusters$clustering}
trace("HTODemux",edit=TRUE)
clara
dim(clara)
length(clara)
head(clara)
trace("HTODemux",edit=TRUE)
?switch
length(c.sum)
summary(as.factor(c.sum))
c.sum[length(c.sum)-1]
hto12.htos[,length(c.sum)-1]]
hto12.htos[,length(c.sum)-1]
dim(p.bin)
p.bin[,length(c.sum)-1]
x
x$classification
length(p.exp[1,])
summary(hto12.htos.gmm$TR_S_type)
summary(hto12.htos.gmm$S_type)
5973+9921
7226+17
346+15370
?subset
?write.table
?ddply
library(plyr)
trace(HTODemux,edit=TRUE)
trace(Mclust,edit=TRUE)
trace(HTODemux,edit=TRUE)
all_rna=readRDS("~/bncmrk-dblts/Data/CZI.PBMC/CZI.PBMC.RNA.raw.matrix.sparse.unprocessed.Rds")
genes=read.delim("~/bncmrk-dblts/Data/CZI.PBMC/CZI.PBMC.genes.tsv",
header = F, stringsAsFactors = F, check.names = F)
# change rownames of genes from ENSEMBL id to symbols
g_ids <- NULL
for (g in 1:nrow(all_rna)) {
idx <- which(genes$V1 == rownames(all_rna)[g])
g_ids <- c(g_ids, genes$V2[idx[1]])
}
rownames(all_rna) <- g_ids
all_rna=all_rna[order(rownames(all_rna)),]
# remove duplicate gene symbols from rna matrix
dup_id <- which(duplicated(rownames(all_rna)))
all_rna <- all_rna[-dup_id, ]
all_hto=readRDS("~/bncmrk-dblts/Data/CZI.PBMC/CZI.PBMC.HTO.ordered.count.matrix.Rds")
#all_hto[c("control-GTCAACTCTTTAGCG", "Mono-AGTAAGTTCAGCGTA",
# "Bcell-TGATGGCCTATTGGG", "Tcell-TTCCGCCTCTCTTTG"),]
all_hto=all_hto[c(1,2,3,5),]
#rownames(all_hto) <- c("Control", "Mono", "Bcell", "Tcell")
rownames(all_hto) <- c("Bcell", "Mono", "Tcell", "Control")
#Clean all the data sets
pbmc.umis=pbmc.umis[rowSums(pbmc.umis)>0,colSums(pbmc.umis)>0]
hto12.umis=hto12.umis[rowSums(hto12.umis)>0,colSums(hto12.umis)>0]
all_rna=all_rna[rowSums(all_rna)>0,colSums(all_rna)>0]
all_hto=all_hto[,intersect(colnames(all_hto),colnames(all_rna))]
getwd()
saveRDS(all_hto,"CZI.PMBC.HTO.pooled.HTO.matrix.Rds")
setwd("Data/CZI.PBMC/")
getwd()
saveRDS(all_hto,"CZI.PMBC.HTO.pooled.HTO.matrix.Rds")
setwd("../PBMC.8.HTO/")
getwd()
saveRDS(hto12.htos,"Four.Cell.12.HTO.HTO.pooled.HTO.matrix.Rds")
getwd()
saveRDS(hto12.htos,"../Four.Cell.12.HTO/Four.Cell.12.HTO.HTO.pooled.HTO.matrix.Rds")
getwd()
saveRDS(pbmc.htos,"PBMC.8.HTO.HTO.pooled.HTO.matrix.Rds")
file_name=strsplit(x=file_name,split=".Rds")[[1]][1]
file_name="CZI.PMBC.HTO.pooled.HTO.matrix.Rds"
name="CZI.PMBC.HTO.pooled.HTO.matrix.Rds"
name=strsplit(x=file_name,split=".pooled")[[1]][1]
name
clss_name=paste(name,"sample.classifications.GMM.csv",sep=".")
clss_name
pr_name=strsplit(x=file_name,split=".HTO.pooled")[[1]][1]
pr_name
gr_trt_fldr=paste0("/projects/ucar-lab/danaco/GroundTruths/",pr_name)
gr_trt_fldr
gr_trt_fldr=paste0("/projects/ucar-lab/danaco/GroundTruths/",pr_name,"/")
clss_name=paste(name,"sample.classifications.GMM.csv",sep=".")
paste0(gr_trt_fldr,clss_name)
dim(all_hto)
dim(hto12.htos.gmm)
write.csv(czi.pbmc.gmm
,"~/bncmrk-dblts/GroundTruths/CZI.PBMC/CZI.PBMC.HTO.sample.classifications.GMM.csv")
rownames(all_hto)
rownames(all_hto)
hto_sel=all_hto
hto_anns=czi.pbmc.gmm
i=1; j=2;
i
j
plot(x = as.numeric(hto_sel[i,]), y = as.numeric(hto_sel[j,]),
main = "HTO Raw Read Counts", xlab = rownames(hto_sel)[i], ylab = rownames(hto_sel)[j], cex = 0.75)
pdf("try.pdf")
plot(x = as.numeric(hto_sel[i,]), y = as.numeric(hto_sel[j,]),
main = "HTO Raw Read Counts", xlab = rownames(hto_sel)[i], ylab = rownames(hto_sel)[j], cex = 0.75)
dev.off()
getwd()
pdf("trylog.pdf")
plot(x = log2(as.numeric(hto_sel[i,])+1), y = log2(as.numeric(hto_sel[j,])+1),
main = "HTO Log2 Raw Read Counts", xlab = rownames(hto_sel)[i], ylab = rownames(hto_sel)[j], cex = 0.75)
dev.off()
j=3
pdf("trylog.pdf")
plot(x = log2(as.numeric(hto_sel[i,])+1), y = log2(as.numeric(hto_sel[j,])+1),
main = "HTO Log2 Raw Read Counts", xlab = rownames(hto_sel)[i], ylab = rownames(hto_sel)[j], cex = 0.75)
dev.off()
j=4
pdf("trylog.pdf")
plot(x = log2(as.numeric(hto_sel[i,])+1), y = log2(as.numeric(hto_sel[j,])+1),
main = "HTO Log2 Raw Read Counts", xlab = rownames(hto_sel)[i], ylab = rownames(hto_sel)[j], cex = 0.75)
dev.off()
i=2
j=3
pdf("trylog.pdf")
plot(x = log2(as.numeric(hto_sel[i,])+1), y = log2(as.numeric(hto_sel[j,])+1),
main = "HTO Log2 Raw Read Counts", xlab = rownames(hto_sel)[i], ylab = rownames(hto_sel)[j], cex = 0.75)
dev.off()
j
j=4
pdf("trylog.pdf")
plot(x = log2(as.numeric(hto_sel[i,])+1), y = log2(as.numeric(hto_sel[j,])+1),
main = "HTO Log2 Raw Read Counts", xlab = rownames(hto_sel)[i], ylab = rownames(hto_sel)[j], cex = 0.75)
dev.off()
j
i=3
pdf("trylog.pdf")
plot(x = log2(as.numeric(hto_sel[i,])+1), y = log2(as.numeric(hto_sel[j,])+1),
main = "HTO Log2 Raw Read Counts", xlab = rownames(hto_sel)[i], ylab = rownames(hto_sel)[j], cex = 0.75)
dev.off()
for (i in 1:nrow(hto_sel)) {
j = i + 1
for (j in j:nrow(hto_sel)) {
print(j)
}
}
for (i in 1:nrow(hto_sel)) {
print(paste0("i=",i))
j = i + 1
for (j in j:nrow(hto_sel)) {
print(paste0("j=",j))
}
}
hto12.htos.htod$HTO_classification[1]
hto12.htos.htod$HTO_classification.global[1]
hto12.htos.msq$MULTI_ID[1]
hto12.htos.msq$MULTI_ID[2]
hto12.htos.msq$MULTI_ID[10]
hto12.htos.msq$MULTI_ID[102]
hto12.htos.msq$MULTI_ID[1023]
hto12.htos.msq$MULTI_ID[1024]
hto12.htos.msq$MULTI_ID[1025]
hto12.htos.msq$MULTI_ID[1026]
hto12.htos.msq$MULTI_classification[235]
hto12.htos.msq$MULTI_classification[2355]
hto12.htos.msq$MULTI_classification[232]
hto12.htos.msq$MULTI_classification[2326]
bebeci=hto12.htos.msq[hto12.htos.msq$MULTI_classification=="Doublet"]
bebeci=hto12.htos.msq[,hto12.htos.msq$MULTI_classification=="Doublet"]
dim(bebebe)
dim(bebeci)
dim(hto12.htos.msq)
bebeci$MULTI_ID[1]
source('~/bncmrk-dblts/R/HTO.MULTIseqDemux.analysis.R')
czi.pbmc.msq=HTO.MULTIseqDemux.analysis(all_hto)
summary(czi.pbmc.msq$MULTI_ID)
summary(czi.pbmc.msq$MULTI_classification)
colnames(czi.pbmc.gmm)
czi.pbmc.gmm$Sample_Short[1]
czi.pbmc.gmm$Sample[1]
summary(czi.pbmc.htod$HTO_classification)
czi.pbmc.htod$Sample=czi.pbmc.htod$HTO_classification
colnames(czi.pbmc.htod)
rownames(czi.pbmc.htod)
colnames(czi.pbmc.htod)
czi.pbmc.htod[1,10]
length(czi.pbmc.htod$HTO_classification)
dim(colbind(czi.pbmc.htod$HTO_classification,czi.pbmc.htod$HTO_classification.global))
dim(cbind2(czi.pbmc.htod$HTO_classification,czi.pbmc.htod$HTO_classification.global))
write.csv(cbind2(czi.pbmc.htod$HTO_classification,czi.pbmc.htod$HTO_classification.global),"try.csv")
bebeto=read.csv("try.csv")
bebeto$V1[1]
bebeto$V1[2]
bebeto$V2[2]
bebeto=cbind2(czi.pbmc.htod$HTO_classification,czi.pbmc.htod$HTO_classification.global)
bebeto[1,1]
czi.pbmc.htod$HTO_classification[1]
czi.pbmc.htod$HTO_classification.global[1]
czi.pbmc.htod$HTO_classification[1]
czi.pbmc.msq$MULTI_ID[1]
source('~/bncmrk-dblts/R/HTO.MULTIseqDemux.analysis.R')
czi.pbmc.msq$MULTI_classification[1]
source('~/bncmrk-dblts/R/HTO.MULTIseqDemux.analysis.R')
czi.pbmc.msq=HTO.MULTIseqDemux.analysis(all_hto)
czi.pbmc.msq$MULTI_ID[1]
pbmc.htos.gmm=HTO.GMM.analysis(pbmc.htos)
write.csv(pbmc.htos.gmm[c(1,4)]
,"~/bncmrk-dblts/GroundTruths/PBMC.8.HTO/PBMC.8.HTO.HTO.sample.classifications.GMM.csv")
write.csv(pbmc.htos.gmm[c(1,2)]
,"~/bncmrk-dblts/GroundTruths/PBMC.8.HTO/PBMC.8.HTO.HTO.sample.annotations.GMM.csv")
pbmc.htos.htod=HTO.HTODemux.analysis(pbmc.htos)
write.csv(pbmc.htos.htod$HTO_classification.global,
"~/bncmrk-dblts/GroundTruths/PBMC.8.HTO/PBMC.8.HTO.HTO.sample.classifications.HTODemux.csv")
write.csv(pbmc.htos.htod$HTO_classification,
"~/bncmrk-dblts/GroundTruths/PBMC.8.HTO/PBMC.8.HTO.HTO.sample.annotations.HTODemux.csv")
pbmc.htos.msq=HTO.MULTIseqDemux.analysis(pbmc.htos)
write.csv(pbmc.htos.msq$MULTI_ID,
"~/bncmrk-dblts/GroundTruths/PBMC.8.HTO/PBMC.8.HTO.HTO.sample.classifications.MULTIseqDemux.csv")
write.csv(pbmc.htos.msq$MULTI_classification,
"~/bncmrk-dblts/GroundTruths/PBMC.8.HTO/PBMC.8.HTO.HTO.sample.annotations.MULTIseqDemux.csv")
hto12.htos.gmm=HTO.GMM.analysis(hto12.htos)
write.csv(hto12.htos.gmm[c(1,4)]
,"~/bncmrk-dblts/GroundTruths/Four.Cell.12.HTO/Four.Cell.12.HTO.HTO.sample.classifications.GMM.csv")
write.csv(hto12.htos.gmm[c(1,2)]
,"~/bncmrk-dblts/GroundTruths/Four.Cell.12.HTO/Four.Cell.12.HTO.HTO.sample.annotations.GMM.csv")
hto12.htos.htod=HTO.HTODemux.analysis(hto12.htos)
write.csv(hto12.htos.htod$HTO_classification.global,
"~/bncmrk-dblts/GroundTruths/Four.Cell.12.HTO/Four.Cell.12.HTO.HTO.sample.classifications.HTODemux.csv")
write.csv(hto12.htos.htod$HTO_classification,
"~/bncmrk-dblts/GroundTruths/Four.Cell.12.HTO/Four.Cell.12.HTO.HTO.sample.annotations.HTODemux.csv")
hto12.htos.msq=HTO.MULTIseqDemux.analysis(hto12.htos)
write.csv(hto12.htos.msq$MULTI_ID,
"~/bncmrk-dblts/GroundTruths/Four.Cell.12.HTO/Four.Cell.12.HTO.HTO.sample.classifications.MULTIseqDemux.csv")
write.csv(hto12.htos.msq$MULTI_classification,
"~/bncmrk-dblts/GroundTruths/Four.Cell.12.HTO/Four.Cell.12.HTO.HTO.sample.annotations.MULTIseqDemux.csv")
czi.pbmc.gmm=HTO.GMM.analysis(all_hto)
write.csv(czi.pbmc.gmm[c(1,4)]
,"~/bncmrk-dblts/GroundTruths/CZI.PBMC/CZI.PBMC.HTO.sample.classifications.GMM.csv")
write.csv(czi.pbmc.gmm[c(1,2)]
,"~/bncmrk-dblts/GroundTruths/CZI.PBMC/CZI.PBMC.HTO.sample.annotations.GMM.csv")
czi.pbmc.htod=HTO.HTODemux.analysis(all_hto)
write.csv(czi.pbmc.htod$HTO_classification.global,
"~/bncmrk-dblts/GroundTruths/CZI.PBMC/CZI.PBMC.HTO.sample.classifications.HTODemux.csv")
write.csv(czi.pbmc.htod$HTO_classification,
"~/bncmrk-dblts/GroundTruths/CZI.PBMC/CZI.PBMC.HTO.sample.annotations.HTODemux.csv")
czi.pbmc.msq=HTO.MULTIseqDemux.analysis(all_hto)
write.csv(czi.pbmc.msq$MULTI_ID,
"~/bncmrk-dblts/GroundTruths/CZI.PBMC/CZI.PBMC.HTO.sample.classifications.MULTIseqDemux.csv")
write.csv(czi.pbmc.msq$MULTI_classification,
"~/bncmrk-dblts/GroundTruths/CZI.PBMC/CZI.PBMC.HTO.sample.annotations.MULTIseqDemux.csv")
trace(heatmap.2,edit=TRUE)
dim(czi.umis)
dim(all_rna)
dim(pbmc.umis)
genes.nn=Reduce(intersect,list(rownames(hto12.umis),rownames(pbmc.umis),rownames(all_rna)))
pbmc.umis=pbmc.umis[genes.nn,]
hto12.umis=hto12.umis[genes.nn,]
all_rna=all_rna[genes.nn,]
dim(pbmc.umis)
dim(hto12.umis)
dim(all_rna)
ncol(all_rna)
seq(ncol(all_rna))
?seq
seq(1:5)
seq(5)
df=all_rna
spec = c(train = .7, test = .15, validate = .15)
g = sample(cut(
seq(nrow(df)),
nrow(df)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df, g)
df=all_rna
spec = c(train = .7, test = .15, validate = .15)
g = sample(cut(
seq(ncol(df)),
ncol(df)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df, g)
colnames(all_rna)[1]
for(i in 1:10){
name=paste("CZI.PBMC",i,"umis",sep=".")
if (i<10){
assign(name,all_rna[,substr(colnames(all_rna),1,2)==paste(i,"-",sep="")])
}else {
assign(name,all_rna[,substr(colnames(all_rna),1,2)==as.character(i)])
}
}
ls(pattern="CZI.PBMC")
dim(CZI.PBMC.1.umis)
spec = c(train = .7, test = .15, validate = .15)
df=CZI.PBMC.1.umis
g = sample(cut(
seq(ncol(df)),
ncol(df)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df, g)
spec = c(train = .7, test = .15, validate = .15)
df=CZI.PBMC.1.umis[,1:100]
g = sample(cut(
seq(ncol(df)),
ncol(df)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df, g)
dim(res$train)
res$train
length(res$train)
dim(res$train)
dim(df)
1294160/dim(df)[1]
dim(res[[train]])
dim(res[["train"]])
res[["train"]]
colnames(res$train)
rownames(res$train)
colnames(df)
typeof(df)
typeof(data.frame(df))
df2=data.frame(df)
dim(df2)
colnames(df)=gsub(x=colnames(df),
pattern="X",replacement="")
df
colnames(df)
colnames(df2)=gsub(x=colnames(df2),
pattern="X",replacement="")
colnames(df2)
colnames(df)
df2=data.frame(df)
colnames(df2)
colnames(df2)=gsub(x=colnames(df2),
pattern="X",replacement="")
colnames(df2)=gsub(x=colnames(df2),
pattern=".",replacement="-")
colnames(df2)
df2=data.frame(df)
colnames(df2)=gsub(x=colnames(df2),
pattern="X",replacement="")
colnames(df2)=gsub(x=colnames(df2),
pattern="\\.",replacement="\\-")
colnames(df2)
g = sample(cut(
seq(nrow(df2)),
nrow(df2)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df2, g)
dim(res$train)
g = sample(cut(
seq(ncol(df2)),
ncol(df2)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df2, g)
g = sample(cut(
seq(ncol(df2)),
ncol(df2)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df2, g)
g = sample(cut(
seq(ncol(df2)),
ncol(df2)*cumsum(c(0,spec)),
labels = names(spec)
))
res = split(df2, g)
g
dim(g)
length(g)
df2.train=subset(df2,g=="train")
dim(df2)
g
df2.train=df2[,g=="train"]
dim(df2.train)
df2.test=df2[,g=="test"]
dim(df2.test)
df2.validation=df2[,g=="validation"]
dim(df2.validation)
sum(g=="test")
sum(g=="validatioon")
sum(g=="validate")
df2.validate=df2[,g=="validate"]
dim(df2.validate)
write.csv(all_rna,"all_rna.csv")
dim(all_rna)
unparse(all_rna)
parse(all_rna)
deparse(all_rna)
deparse(substitute(all_rna))
write.csvCZI.PBMC.1.umis,"CZI.PBMC.1.umis.csv")
write.csv(CZI.PBMC.1.umis,"CZI.PBMC.1.umis.csv")
ls(pattern="test")
parse(test="df2.test")
parse(text="df2.test")
eval(parse(text="df2.test"))
sr_hto=CreateSeuratObject(counts=all_hto,assay="HTO")
sr_hto=NormalizeData(sr_hto,assay = "HTO",normalization.method = "CLR")
all_hto[,1]
GetAssayData(sr_hto)[1,]
GetAssayData(sr_hto)[,1]
sr_hto2=ScaleData(sr_hto)
GetAssayData(sr_hto)[,1]
GetAssayData(sr_hto2)[,1]
GetAssayData(sr_hto)[,2]
GetAssayData(sr_hto2)[,2]
dim(df)
CZI.PBMC.1.umis.100=CZI.PBMC.1.umis[,1:100]
CZI.PBMC.1.umis.100=data.frame(CZI.PBMC.1.umis.100)
colnames(CZI.PBMC.1.umis.100)=gsub(x=colnames(CZI.PBMC.1.umis.100),pattern="X",replacement="")
colnames(CZI.PBMC.1.umis.100)=gsub(x=colnames(CZI.PBMC.1.umis.100),pattern="\\.",replacement="\\-")
df_name=deparse(substitute(CZI.PBMC.1.umis.100))
df_name
g = sample(cut(
seq(ncol(df)),
ncol(df)*cumsum(c(0,spec)),
labels = names(spec)
))
g = sample(cut(
seq(ncol(eval(parse(text=df_name)))),
ncol(eval(parse(text=df_name)))*cumsum(c(0,spec)),
labels = names(spec)
))
assign(paste(df_name,"train",sep="."),CZI.PBMC.1.umis.100[,g=="train"])
dim(CZI.PBMC.1.umis.100.train)
assign(paste(df_name,"train",sep="."),GetAssayData(NormalizeData(CreateSeuratObject(eval(parse(text=paste(df_name,"train",sep=".")))),method="CLR")))
CZI.PBMC.1.umis.100.train[1,]
?split
?data.frame
df3=data.frame(df,check.names = FALSE)
dim(df)
dim(res$train)
length(g)
?split
?split
dim(df)
data("iris")
dim(iris)
summary(iris$Species)
ls()
ls(pattern="CZI")
head(CZI.PBMC.2.umis)
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.2.umis),method="CLR")),"CZI.PBMC.2.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.1.umis),method="CLR")),"CZI.PBMC.1.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.3.umis),method="CLR")),"CZI.PBMC.3.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.4.umis),method="CLR")),"CZI.PBMC.4.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.4.umis),method="CLR")),"CZI.PBMC.4.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.5.umis),method="CLR")),"CZI.PBMC.5.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.6.umis),method="CLR")),"CZI.PBMC.6.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.7.umis),method="CLR")),"CZI.PBMC.7.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.8.umis),method="CLR")),"CZI.PBMC.8.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.9.umis),method="CLR")),"CZI.PBMC.9.umis.mtx")
writeMM(GetAssayData(NormalizeData(CreateSeuratObject(CZI.PBMC.10.umis),method="CLR")),"CZI.PBMC.10.umis.mtx")
write.csv(colnames(CZI.PBMC.1.umis),"CZI.PBMC.1.brcds")
for (i in 1:10){
name=paste0("CZI.PBMC.",i)
write.csv(colnames(eval(parse(text=paste0(name,".umis")))),paste0(name,".brcds"))
}
list.files(pattern="brcds")
list.files(pattern="mtx")
getwd()
list.files(pattern="brcd")
dim(all_rna)
dim(CCZI.PBMC.1.umis)
dim(CZI.PBMC.1.umis)
dim(all_rna)
getwd()
